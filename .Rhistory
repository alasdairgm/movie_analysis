labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies_genres %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count))  +
scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies_genres %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count))  +
scale_fill_brewer(palette = "BuPu")
movies_genres %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count))  +
scale_fill_brewer(palette = "BuPu") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count))  +
scale_fill_brewer(palette = "BuPu") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
library(ccwickedwango)
does_al_approve("bugger")
install.packages("ccwickedwango")
install.packages("ccwickedwango")
library(ccwickedwango)
grouper()
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count))  +
scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
library(tidyverse)
library(vctrs)
movies <- read_csv("clean_data/movies_clean.csv")
# how many genres am I working with?
genres_unique <- movies %>%
select(genres) %>%
pull() %>%
str_split(pattern = ", ") %>%
flatten_chr() %>%
unique()
genres_unique
# creating a logical column for every genre
movies_genres <- movies %>%
mutate(genre_action = str_detect(genres, "[Aa]ction"), .before = num_votes) %>%
mutate(genre_adventure = str_detect(genres, "[Aa]dventure"), .before = num_votes) %>%
mutate(genre_animation = str_detect(genres, "[Aa]nimation"), .before = num_votes) %>%
mutate(genre_comedy = str_detect(genres, "[Cc]omedy"), .before = num_votes) %>%
mutate(genre_crime = str_detect(genres, "[Cc]rime"), .before = num_votes) %>%
mutate(genre_drama = str_detect(genres, "[Dd]rama"), .before = num_votes) %>%
mutate(genre_fantasy = str_detect(genres, "[Ff]antasy"), .before = num_votes) %>%
mutate(genre_family = str_detect(genres, "[Ff]amily"), .before = num_votes) %>%
mutate(genre_history = str_detect(genres, "[Hh]istory"), .before = num_votes) %>%
mutate(genre_horror = str_detect(genres, "[Hh]orror"), .before = num_votes) %>%
mutate(genre_music = str_detect(genres, "[Mm]usic"), .before = num_votes) %>%
mutate(genre_mystery = str_detect(genres, "[Mm]ystery"), .before = num_votes) %>%
mutate(genre_romance = str_detect(genres, "[Rr]omance"), .before = num_votes) %>%
mutate(genre_scifi = str_detect(genres, "[Ss]ci-Fi"), .before = num_votes) %>%
mutate(genre_thriller = str_detect(genres, "[Tt]hriller"), .before = num_votes) %>%
mutate(genre_war = str_detect(genres, "[Ww]ar"), .before = num_votes) %>%
# count up how often each genre appears
summarise(across(.cols = starts_with("genre_"), .fns = ~sum(.x == TRUE))) %>%
# pivot the data so each row is a genre
pivot_longer(cols = everything(), names_to = "genre", values_to = "count") %>%
mutate(genre = str_remove(genre, "genre_"))
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count))  +
scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
filter(count > 4) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count))  +
scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count))  +
scale_fill_distiller(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies %>%
select(directors)
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre))  +
scale_fill_distiller(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre))
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre))  +
scale_fill_distiller(palette = "Set2")
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre))  +
scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre))  +
#scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre),
show.legend = F)  +
#scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies %>%
select(directors) %>%
mutate(directors = str_replace(directors, ", .+", "*"))
movies %>%
mutate(directors = str_replace(directors, ", .+", "*"))
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n())
geom_col(aes(x = reorder(directors, count, descending = T, y = count))
ggplot() +
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, descending = T), y = count))
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, descending = T), y = count)) +
coord_flip()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, descending = T), y = count)) +
labs(x = "Director",
y = "Count in my top movies")
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, descending = T), y = count)) +
labs(x = "Director",
y = "Count in my top movies") +
coord_flip()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count)) +
labs(x = "Director",
y = "Count in my top movies") +
coord_flip()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count)) +
labs(x = "Director\n(* plus others)\n",
y = "\nCount in my top movies") +
coord_flip()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
filter(count > 1) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count)) +
labs(x = "Director\n(* plus others)\n",
y = "\nCount in my top movies") +
coord_flip()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
#filter(count > 1) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count,
fill = directors)) +
labs(x = "Director\n(* plus others)\n",
y = "\nCount in my top movies") +
coord_flip()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
#filter(count > 1) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count,
fill = directors), show.legend = F) +
labs(x = "Director\n(* plus others)\n",
y = "\nCount in my top movies") +
coord_flip()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
filter(count > 1) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count,
fill = directors), show.legend = F) +
labs(x = "Director\n(* plus others)\n",
y = "\nCount in my top movies") +
coord_flip()
source("~/Documents/GitHub/movie_analysis/synopsis_df_creator.R", echo=TRUE)
library(tidyverse)
movies <- janitor::clean_names(read_csv("raw_data/ratings.csv"))
synopses <- read_csv("raw_data/synopsis_data.csv")
movies_clean <- movies %>%
left_join(synopses, by = c("title" = "movie")) %>%
select(-c("const", "url", "title_type")) %>%
relocate(title, .before = 1) # move title to first col
movies_clean
write_csv(movies_clean, "clean_data/movies_clean.csv")
library(tidyverse)
library(vctrs)
movies <- read_csv("clean_data/movies_clean.csv")
# how many genres am I working with?
genres_unique <- movies %>%
select(genres) %>%
pull() %>%
str_split(pattern = ", ") %>%
flatten_chr() %>%
unique()
genres_unique
# creating a logical column for every genre
movies_genres <- movies %>%
mutate(genre_action = str_detect(genres, "[Aa]ction"), .before = num_votes) %>%
mutate(genre_adventure = str_detect(genres, "[Aa]dventure"), .before = num_votes) %>%
mutate(genre_animation = str_detect(genres, "[Aa]nimation"), .before = num_votes) %>%
mutate(genre_comedy = str_detect(genres, "[Cc]omedy"), .before = num_votes) %>%
mutate(genre_crime = str_detect(genres, "[Cc]rime"), .before = num_votes) %>%
mutate(genre_drama = str_detect(genres, "[Dd]rama"), .before = num_votes) %>%
mutate(genre_fantasy = str_detect(genres, "[Ff]antasy"), .before = num_votes) %>%
mutate(genre_family = str_detect(genres, "[Ff]amily"), .before = num_votes) %>%
mutate(genre_history = str_detect(genres, "[Hh]istory"), .before = num_votes) %>%
mutate(genre_horror = str_detect(genres, "[Hh]orror"), .before = num_votes) %>%
mutate(genre_music = str_detect(genres, "[Mm]usic"), .before = num_votes) %>%
mutate(genre_mystery = str_detect(genres, "[Mm]ystery"), .before = num_votes) %>%
mutate(genre_romance = str_detect(genres, "[Rr]omance"), .before = num_votes) %>%
mutate(genre_scifi = str_detect(genres, "[Ss]ci-Fi"), .before = num_votes) %>%
mutate(genre_thriller = str_detect(genres, "[Tt]hriller"), .before = num_votes) %>%
mutate(genre_war = str_detect(genres, "[Ww]ar"), .before = num_votes) %>%
# count up how often each genre appears
summarise(across(.cols = starts_with("genre_"), .fns = ~sum(.x == TRUE))) %>%
# pivot the data so each row is a genre
pivot_longer(cols = everything(), names_to = "genre", values_to = "count") %>%
mutate(genre = str_remove(genre, "genre_"))
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre),
show.legend = F)  +
#scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
library(RColorBrewer)
par(mar=c(3,4,2,2))
display.brewer.all()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
filter(count > 1) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count,
fill = directors), show.legend = F) +
labs(x = "Director\n(* plus others)\n",
y = "\nCount in my top movies") +
coord_flip()
# creating a logical column for every genre
movies_genres <- movies %>%
mutate(genre_action = str_detect(genres, "[Aa]ction"), .before = num_votes) %>%
mutate(genre_adventure = str_detect(genres, "[Aa]dventure"), .before = num_votes) %>%
mutate(genre_animation = str_detect(genres, "[Aa]nimation"), .before = num_votes) %>%
mutate(genre_comedy = str_detect(genres, "[Cc]omedy"), .before = num_votes) %>%
mutate(genre_crime = str_detect(genres, "[Cc]rime"), .before = num_votes) %>%
mutate(genre_drama = str_detect(genres, "[Dd]rama"), .before = num_votes) %>%
mutate(genre_fantasy = str_detect(genres, "[Ff]antasy"), .before = num_votes) %>%
mutate(genre_family = str_detect(genres, "[Ff]amily"), .before = num_votes) %>%
mutate(genre_history = str_detect(genres, "[Hh]istory"), .before = num_votes) %>%
mutate(genre_horror = str_detect(genres, "[Hh]orror"), .before = num_votes) %>%
mutate(genre_music = str_detect(genres, "[Mm]usic"), .before = num_votes) %>%
mutate(genre_music = str_detect(genres, "[Mm]usical"), .before = num_votes) %>%
mutate(genre_mystery = str_detect(genres, "[Mm]ystery"), .before = num_votes) %>%
mutate(genre_romance = str_detect(genres, "[Rr]omance"), .before = num_votes) %>%
mutate(genre_scifi = str_detect(genres, "[Ss]ci-Fi"), .before = num_votes) %>%
mutate(genre_thriller = str_detect(genres, "[Tt]hriller"), .before = num_votes) %>%
mutate(genre_war = str_detect(genres, "[Ww]ar"), .before = num_votes) %>%
# count up how often each genre appears
summarise(across(.cols = starts_with("genre_"), .fns = ~sum(.x == TRUE))) %>%
# pivot the data so each row is a genre
pivot_longer(cols = everything(), names_to = "genre", values_to = "count") %>%
mutate(genre = str_remove(genre, "genre_"))
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre),
show.legend = F)  +
#scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
# creating a logical column for every genre
movies_genres <- movies %>%
mutate(genre_action = str_detect(genres, "[Aa]ction"), .before = num_votes) %>%
mutate(genre_adventure = str_detect(genres, "[Aa]dventure"), .before = num_votes) %>%
mutate(genre_animation = str_detect(genres, "[Aa]nimation"), .before = num_votes) %>%
mutate(genre_comedy = str_detect(genres, "[Cc]omedy"), .before = num_votes) %>%
mutate(genre_crime = str_detect(genres, "[Cc]rime"), .before = num_votes) %>%
mutate(genre_drama = str_detect(genres, "[Dd]rama"), .before = num_votes) %>%
mutate(genre_fantasy = str_detect(genres, "[Ff]antasy"), .before = num_votes) %>%
mutate(genre_family = str_detect(genres, "[Ff]amily"), .before = num_votes) %>%
mutate(genre_history = str_detect(genres, "[Hh]istory"), .before = num_votes) %>%
mutate(genre_horror = str_detect(genres, "[Hh]orror"), .before = num_votes) %>%
mutate(genre_music = str_detect(genres, "[Mm]usic"), .before = num_votes) %>%
mutate(genre_musical = str_detect(genres, "[Mm]usical"), .before = num_votes) %>%
mutate(genre_mystery = str_detect(genres, "[Mm]ystery"), .before = num_votes) %>%
mutate(genre_romance = str_detect(genres, "[Rr]omance"), .before = num_votes) %>%
mutate(genre_scifi = str_detect(genres, "[Ss]ci-Fi"), .before = num_votes) %>%
mutate(genre_thriller = str_detect(genres, "[Tt]hriller"), .before = num_votes) %>%
mutate(genre_war = str_detect(genres, "[Ww]ar"), .before = num_votes) %>%
# count up how often each genre appears
summarise(across(.cols = starts_with("genre_"), .fns = ~sum(.x == TRUE))) %>%
# pivot the data so each row is a genre
pivot_longer(cols = everything(), names_to = "genre", values_to = "count") %>%
mutate(genre = str_remove(genre, "genre_"))
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre),
show.legend = F)  +
#scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
filter(count > 1) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count,
fill = directors), show.legend = F) +
labs(x = "Director\n(* plus others)\n",
y = "\nCount in my top movies") +
coord_flip()
movies
---
title: "R Notebook"
library(tidyverse)
movies <- janitor::clean_names(read_csv("raw_data/ratings.csv"))
synopses <- read_csv("raw_data/synopsis_data.csv")
movies_clean <- movies %>%
left_join(synopses, by = c("title" = "movie")) %>%
select(-c("const", "url", "title_type")) %>%
relocate(title, .before = 1) # move title to first col
movies_clean
write_csv(movies_clean, "clean_data/movies_clean.csv")
library(tidyverse)
library(vctrs)
movies <- read_csv("clean_data/movies_clean.csv")
# how many genres am I working with?
genres_unique <- movies %>%
select(genres) %>%
pull() %>%
str_split(pattern = ", ") %>%
flatten_chr() %>%
unique()
genres_unique
# creating a logical column for every genre
movies_genres <- movies %>%
mutate(genre_action = str_detect(genres, "[Aa]ction"), .before = num_votes) %>%
mutate(genre_adventure = str_detect(genres, "[Aa]dventure"), .before = num_votes) %>%
mutate(genre_animation = str_detect(genres, "[Aa]nimation"), .before = num_votes) %>%
mutate(genre_comedy = str_detect(genres, "[Cc]omedy"), .before = num_votes) %>%
mutate(genre_crime = str_detect(genres, "[Cc]rime"), .before = num_votes) %>%
mutate(genre_drama = str_detect(genres, "[Dd]rama"), .before = num_votes) %>%
mutate(genre_fantasy = str_detect(genres, "[Ff]antasy"), .before = num_votes) %>%
mutate(genre_family = str_detect(genres, "[Ff]amily"), .before = num_votes) %>%
mutate(genre_history = str_detect(genres, "[Hh]istory"), .before = num_votes) %>%
mutate(genre_horror = str_detect(genres, "[Hh]orror"), .before = num_votes) %>%
mutate(genre_music = str_detect(genres, "[Mm]usic"), .before = num_votes) %>%
mutate(genre_musical = str_detect(genres, "[Mm]usical"), .before = num_votes) %>%
mutate(genre_mystery = str_detect(genres, "[Mm]ystery"), .before = num_votes) %>%
mutate(genre_romance = str_detect(genres, "[Rr]omance"), .before = num_votes) %>%
mutate(genre_scifi = str_detect(genres, "[Ss]ci-Fi"), .before = num_votes) %>%
mutate(genre_thriller = str_detect(genres, "[Tt]hriller"), .before = num_votes) %>%
mutate(genre_war = str_detect(genres, "[Ww]ar"), .before = num_votes) %>%
# count up how often each genre appears
summarise(across(.cols = starts_with("genre_"), .fns = ~sum(.x == TRUE))) %>%
# pivot the data so each row is a genre
pivot_longer(cols = everything(), names_to = "genre", values_to = "count") %>%
mutate(genre = str_remove(genre, "genre_"))
movies_genres %>%
mutate(genre = str_to_title(genre)) %>%
ggplot() +
geom_col(aes(x = reorder(genre, count, decreasing = T), y = count, fill = genre),
show.legend = F)  +
#scale_fill_brewer(palette = "Set2") +
labs(x = "Movie genre\n",
y = "\nCount in my top movies") +
coord_flip()
library(RColorBrewer)
par(mar=c(3,4,2,2))
display.brewer.all()
movies %>%
mutate(directors = str_replace(directors, ", .+", "*")) %>%
group_by(directors) %>%
summarise(count = n()) %>%
filter(count > 1) %>%
ggplot() +
geom_col(aes(x = reorder(directors, count, decreasing = T), y = count,
fill = directors), show.legend = F) +
labs(x = "Director\n(* plus others)\n",
y = "\nCount in my top movies") +
coord_flip()
library(tidyverse)
library(tidytext)
movies <- read_csv("clean_data/movies_clean.csv")
synopses_df <- movies %>%
select(title, synopsis) %>%
unnest_tokens(word, synopsis)
synopses_df
synopses_df %>%
count(title, word)
synopses_df_no_stop <- synopses_df %>%
anti_join(stop_words, by = "word") %>%
count(title, word, sort = TRUE)
all_synopses_tf_idf <- synopses_df_no_stop %>%
count(title, word) %>%
bind_tf_idf(term = word, document = title, n = n) %>%
arrange(desc(tf_idf))
all_synopses_tf_idf
all_synopses_tf_idf %>%
group_by(title) %>%
slice_max(tf_idf, n = 1)
just_words <- movies %>%
select(synopsis) %>%
unnest_tokens(word, synopsis) %>%
anti_join(stop_words, by = "word") %>%
count(word)
just_words
library(ggwordcloud)
ggwordcloud(
words = just_words$word,
freq = just_words$n,
min.freq = 2
)
# can see sentiment words here
get_sentiments("afinn")
just_words %>%
inner_join(get_sentiments("afinn")) %>%
mutate(abs_value = abs(value)) %>%
slice_max(abs_value, n = 5) %>%  # most emotive words, regardless of positice or negative
mutate(word = factor(word, levels = word)) %>% # alphabetical
ggplot() +
aes(x = word, y = n, fill = value) +
geom_col() +
scale_fill_gradient2() +
labs(x = "\nWord in film synopses",
y = "Number of occurences\nacross all synopses\n",
fill = "Sentiment value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(size = 8),
legend.title = element_text(size = 8))
